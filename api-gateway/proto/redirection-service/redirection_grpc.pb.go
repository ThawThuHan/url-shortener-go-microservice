// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/redirection-service/redirection.proto

package redirection_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RedirectionService_GetOriginURL_FullMethodName = "/redirection.RedirectionService/GetOriginURL"
	RedirectionService_GetAccessLog_FullMethodName = "/redirection.RedirectionService/GetAccessLog"
)

// RedirectionServiceClient is the client API for RedirectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedirectionServiceClient interface {
	GetOriginURL(ctx context.Context, in *GetOriginURLRequest, opts ...grpc.CallOption) (*GetOriginURLResponse, error)
	GetAccessLog(ctx context.Context, in *GetAccessLogRequest, opts ...grpc.CallOption) (*GetAccessLogResponse, error)
}

type redirectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRedirectionServiceClient(cc grpc.ClientConnInterface) RedirectionServiceClient {
	return &redirectionServiceClient{cc}
}

func (c *redirectionServiceClient) GetOriginURL(ctx context.Context, in *GetOriginURLRequest, opts ...grpc.CallOption) (*GetOriginURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOriginURLResponse)
	err := c.cc.Invoke(ctx, RedirectionService_GetOriginURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redirectionServiceClient) GetAccessLog(ctx context.Context, in *GetAccessLogRequest, opts ...grpc.CallOption) (*GetAccessLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccessLogResponse)
	err := c.cc.Invoke(ctx, RedirectionService_GetAccessLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedirectionServiceServer is the server API for RedirectionService service.
// All implementations must embed UnimplementedRedirectionServiceServer
// for forward compatibility.
type RedirectionServiceServer interface {
	GetOriginURL(context.Context, *GetOriginURLRequest) (*GetOriginURLResponse, error)
	GetAccessLog(context.Context, *GetAccessLogRequest) (*GetAccessLogResponse, error)
	mustEmbedUnimplementedRedirectionServiceServer()
}

// UnimplementedRedirectionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRedirectionServiceServer struct{}

func (UnimplementedRedirectionServiceServer) GetOriginURL(context.Context, *GetOriginURLRequest) (*GetOriginURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginURL not implemented")
}
func (UnimplementedRedirectionServiceServer) GetAccessLog(context.Context, *GetAccessLogRequest) (*GetAccessLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessLog not implemented")
}
func (UnimplementedRedirectionServiceServer) mustEmbedUnimplementedRedirectionServiceServer() {}
func (UnimplementedRedirectionServiceServer) testEmbeddedByValue()                            {}

// UnsafeRedirectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedirectionServiceServer will
// result in compilation errors.
type UnsafeRedirectionServiceServer interface {
	mustEmbedUnimplementedRedirectionServiceServer()
}

func RegisterRedirectionServiceServer(s grpc.ServiceRegistrar, srv RedirectionServiceServer) {
	// If the following call pancis, it indicates UnimplementedRedirectionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RedirectionService_ServiceDesc, srv)
}

func _RedirectionService_GetOriginURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOriginURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedirectionServiceServer).GetOriginURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedirectionService_GetOriginURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedirectionServiceServer).GetOriginURL(ctx, req.(*GetOriginURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedirectionService_GetAccessLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedirectionServiceServer).GetAccessLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedirectionService_GetAccessLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedirectionServiceServer).GetAccessLog(ctx, req.(*GetAccessLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RedirectionService_ServiceDesc is the grpc.ServiceDesc for RedirectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedirectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redirection.RedirectionService",
	HandlerType: (*RedirectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOriginURL",
			Handler:    _RedirectionService_GetOriginURL_Handler,
		},
		{
			MethodName: "GetAccessLog",
			Handler:    _RedirectionService_GetAccessLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/redirection-service/redirection.proto",
}
